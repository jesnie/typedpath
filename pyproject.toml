[tool.poetry]
name = "typedpath"
version = "0.1.0"
description = "Use typed Python objects to represent files and directories."
authors = ["Jesper Nielsen <jespernielsen1982+typedpath@gmail.com>"]
license = "MIT"
readme = "README.md"

homepage = "https://github.com/jesnie/typedpath"
repository = "https://github.com/jesnie/typedpath"

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Typing :: Typed",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[tool.poetry.dependencies]
numpy = {version = "<2,>=1.23.0", optional = true}
pandas = {version = "<3,>=1.5.0", optional = true}
pyarrow = {version = "<14,>=9.0.0", optional = true}
python = "<4,>=3.10"


[tool.poetry.group.dev.dependencies]
black = "<23.11,>=23.10"
compreq = "<0.3.1,>=0.3.0"
isort = "<5.13,>=5.12"
mypy = "<1.7,>=1.6"
numpy = "<2,>=1.23"
pandas = "<3,>=1.5"
pandas-stubs = "<3,>=1.5"
pyarrow = "<14,>=9.0"
pylint = "<3.1,>=3.0"
pytest = "<7.5,>=7.4"
taskipy = "<1.13,>=1.12"
tomlkit = "<0.12.2,>=0.12.1"

[tool.poetry.extras]
numpy = ["numpy"]
pandas = ["pandas", "pyarrow"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
py_version = 310
profile = "black"

[tool.black]
line-length = 100
target-version = ["py310"]

[tool.mypy]
python_version = "3.10"
show_error_codes = true
# First we turn on *all the checks*, and then we turn off those that are too annoying.
strict = true
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = [
    "_pytest.*",
    "pytest.*",
]
ignore_missing_imports = true


[tool.pylint.messages_control]
max-line-length = 100
disable = [
  "duplicate-code",
  "fixme",
  "global-statement",
  "invalid-name",
  "missing-class-docstring",
  "missing-function-docstring",
  "missing-module-docstring",
  "no-else-return",
  "no-member",
  "too-few-public-methods",
  "unhashable-member",
  "unused-argument",
]

[tool.taskipy.tasks]
isort = """
    echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX isort XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    isort typedpath tests set_version.py requirements.py
"""
isort_check = """
    echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX isort XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    isort --check-only typedpath tests set_version.py requirements.py
"""
black = """
    echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX black XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    black typedpath tests set_version.py requirements.py
"""
black_check = """
    echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX black XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    black --check typedpath tests set_version.py requirements.py
"""
mypy = """
    echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX mypy XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    mypy typedpath tests set_version.py requirements.py
"""
pylint = """
    echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX pylint XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    pylint typedpath tests set_version.py requirements.py
"""
pytest = """
    echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX pytest XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    pytest tests
"""

format = "task isort && task black"
format_check = "task isort_check && task black_check"
lint = "task format_check && task mypy && task pylint"
test = "task lint && task pytest"
format_and_lint = "task format && task lint"
format_and_test = "task format && task test"
